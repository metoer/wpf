// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `CS_Client.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace IRPC
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CallbackClient : Ice.Object, CallbackClientOperations_, CallbackClientOperationsNC_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public abstract class strTransDataFromClientRPCId
    {
        public const string value = "ID_TransDataFromClientRPC";
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CSTransDataFromClient : Ice.Object, CSTransDataFromClientOperations_, CSTransDataFromClientOperationsNC_
    {
    }
}

namespace IRPC
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public delegate void Callback_CallbackClient_TransDataToClient(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public delegate void Callback_CallbackClient_TransHeartbeat();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public delegate void Callback_CSTransDataFromClient_RegistClient();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public delegate void Callback_CSTransDataFromClient_TransDataFromClient(int ret__);
}

namespace IRPC
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public interface CallbackClientPrx : Ice.ObjectPrx
    {
        int TransDataToClient(string strXml);
        int TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IRPC.Callback_CallbackClient_TransDataToClient> begin_TransDataToClient(string strXml);
        Ice.AsyncResult<IRPC.Callback_CallbackClient_TransDataToClient> begin_TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_TransDataToClient(string strXml, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_TransDataToClient(Ice.AsyncResult r__);

        void TransHeartbeat(long lTime);
        void TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IRPC.Callback_CallbackClient_TransHeartbeat> begin_TransHeartbeat(long lTime);
        Ice.AsyncResult<IRPC.Callback_CallbackClient_TransHeartbeat> begin_TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_TransHeartbeat(long lTime, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_TransHeartbeat(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public interface CSTransDataFromClientPrx : Ice.ObjectPrx
    {
        void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval);
        void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_RegistClient> begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval);
        Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_RegistClient> begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_RegistClient(Ice.AsyncResult r__);

        int TransDataFromClient(string strClientId, string strXml);
        int TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_TransDataFromClient> begin_TransDataFromClient(string strClientId, string strXml);
        Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_TransDataFromClient> begin_TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_TransDataFromClient(string strClientId, string strXml, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_TransDataFromClient(Ice.AsyncResult r__);
    }
}

namespace IRPC
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public interface CallbackClientOperations_
    {
        int TransDataToClient(string strXml, Ice.Current current__);

        void TransHeartbeat(long lTime, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public interface CallbackClientOperationsNC_
    {
        int TransDataToClient(string strXml);

        void TransHeartbeat(long lTime);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public interface CSTransDataFromClientOperations_
    {
        void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, Ice.Current current__);

        int TransDataFromClient(string strClientId, string strXml, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public interface CSTransDataFromClientOperationsNC_
    {
        void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval);

        int TransDataFromClient(string strClientId, string strXml);
    }
}

namespace IRPC
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public sealed class CallbackClientPrxHelper : Ice.ObjectPrxHelperBase, CallbackClientPrx
    {
        #region Synchronous operations

        public int TransDataToClient(string strXml)
        {
            return this.TransDataToClient(strXml, null, false);
        }

        public int TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return this.TransDataToClient(strXml, context__, true);
        }

        private int TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__TransDataToClient_name);
            return end_TransDataToClient(begin_TransDataToClient(strXml, context__, explicitCtx__, true, null, null));
        }

        public void TransHeartbeat(long lTime)
        {
            this.TransHeartbeat(lTime, null, false);
        }

        public void TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            this.TransHeartbeat(lTime, context__, true);
        }

        private void TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            end_TransHeartbeat(begin_TransHeartbeat(lTime, context__, explicitCtx__, true, null, null));
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<IRPC.Callback_CallbackClient_TransDataToClient> begin_TransDataToClient(string strXml)
        {
            return begin_TransDataToClient(strXml, null, false, false, null, null);
        }

        public Ice.AsyncResult<IRPC.Callback_CallbackClient_TransDataToClient> begin_TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_TransDataToClient(strXml, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_TransDataToClient(string strXml, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TransDataToClient(strXml, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TransDataToClient(strXml, ctx__, true, false, cb__, cookie__);
        }

        private const string __TransDataToClient_name = "TransDataToClient";

        public int end_TransDataToClient(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __TransDataToClient_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<IRPC.Callback_CallbackClient_TransDataToClient> begin_TransDataToClient(string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__TransDataToClient_name);
            IceInternal.TwowayOutgoingAsync<IRPC.Callback_CallbackClient_TransDataToClient> result__ =  getTwowayOutgoingAsync<IRPC.Callback_CallbackClient_TransDataToClient>(__TransDataToClient_name, TransDataToClient_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__TransDataToClient_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(strXml);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void TransDataToClient_completed__(Ice.AsyncResult r__, IRPC.Callback_CallbackClient_TransDataToClient cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_TransDataToClient(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<IRPC.Callback_CallbackClient_TransHeartbeat> begin_TransHeartbeat(long lTime)
        {
            return begin_TransHeartbeat(lTime, null, false, false, null, null);
        }

        public Ice.AsyncResult<IRPC.Callback_CallbackClient_TransHeartbeat> begin_TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_TransHeartbeat(lTime, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_TransHeartbeat(long lTime, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TransHeartbeat(lTime, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TransHeartbeat(lTime, ctx__, true, false, cb__, cookie__);
        }

        private const string __TransHeartbeat_name = "TransHeartbeat";

        public void end_TransHeartbeat(Ice.AsyncResult r__)
        {
            end__(r__, __TransHeartbeat_name);
        }

        private Ice.AsyncResult<IRPC.Callback_CallbackClient_TransHeartbeat> begin_TransHeartbeat(long lTime, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<IRPC.Callback_CallbackClient_TransHeartbeat> result__ = getOnewayOutgoingAsync<IRPC.Callback_CallbackClient_TransHeartbeat>(__TransHeartbeat_name, TransHeartbeat_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__TransHeartbeat_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeLong(lTime);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void TransHeartbeat_completed__(IRPC.Callback_CallbackClient_TransHeartbeat cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CallbackClientPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackClientPrx r = b as CallbackClientPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CallbackClientPrxHelper h = new CallbackClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CallbackClientPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CallbackClientPrx r = b as CallbackClientPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CallbackClientPrxHelper h = new CallbackClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CallbackClientPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CallbackClientPrxHelper h = new CallbackClientPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackClientPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CallbackClientPrxHelper h = new CallbackClientPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackClientPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackClientPrx r = b as CallbackClientPrx;
            if(r == null)
            {
                CallbackClientPrxHelper h = new CallbackClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CallbackClientPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CallbackClientPrxHelper h = new CallbackClientPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::IRPC::CallbackClient",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        public static void write__(IceInternal.BasicStream os__, CallbackClientPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static CallbackClientPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                CallbackClientPrxHelper result = new CallbackClientPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public sealed class CSTransDataFromClientPrxHelper : Ice.ObjectPrxHelperBase, CSTransDataFromClientPrx
    {
        #region Synchronous operations

        public void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval)
        {
            this.RegistClient(strClientId, callbackClient, iHeartbeatInterval, null, false);
        }

        public void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            this.RegistClient(strClientId, callbackClient, iHeartbeatInterval, context__, true);
        }

        private void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            end_RegistClient(begin_RegistClient(strClientId, callbackClient, iHeartbeatInterval, context__, explicitCtx__, true, null, null));
        }

        public int TransDataFromClient(string strClientId, string strXml)
        {
            return this.TransDataFromClient(strClientId, strXml, null, false);
        }

        public int TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return this.TransDataFromClient(strClientId, strXml, context__, true);
        }

        private int TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__TransDataFromClient_name);
            return end_TransDataFromClient(begin_TransDataFromClient(strClientId, strXml, context__, explicitCtx__, true, null, null));
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_RegistClient> begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval)
        {
            return begin_RegistClient(strClientId, callbackClient, iHeartbeatInterval, null, false, false, null, null);
        }

        public Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_RegistClient> begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_RegistClient(strClientId, callbackClient, iHeartbeatInterval, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_RegistClient(strClientId, callbackClient, iHeartbeatInterval, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_RegistClient(strClientId, callbackClient, iHeartbeatInterval, ctx__, true, false, cb__, cookie__);
        }

        private const string __RegistClient_name = "RegistClient";

        public void end_RegistClient(Ice.AsyncResult r__)
        {
            end__(r__, __RegistClient_name);
        }

        private Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_RegistClient> begin_RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<IRPC.Callback_CSTransDataFromClient_RegistClient> result__ = getOnewayOutgoingAsync<IRPC.Callback_CSTransDataFromClient_RegistClient>(__RegistClient_name, RegistClient_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__RegistClient_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(strClientId);
                IRPC.CallbackClientPrxHelper.write__(os__, callbackClient);
                os__.writeInt(iHeartbeatInterval);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void RegistClient_completed__(IRPC.Callback_CSTransDataFromClient_RegistClient cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_TransDataFromClient> begin_TransDataFromClient(string strClientId, string strXml)
        {
            return begin_TransDataFromClient(strClientId, strXml, null, false, false, null, null);
        }

        public Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_TransDataFromClient> begin_TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_TransDataFromClient(strClientId, strXml, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_TransDataFromClient(string strClientId, string strXml, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TransDataFromClient(strClientId, strXml, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TransDataFromClient(strClientId, strXml, ctx__, true, false, cb__, cookie__);
        }

        private const string __TransDataFromClient_name = "TransDataFromClient";

        public int end_TransDataFromClient(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __TransDataFromClient_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readInt();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }
         
        private Ice.AsyncResult<IRPC.Callback_CSTransDataFromClient_TransDataFromClient> begin_TransDataFromClient(string strClientId, string strXml, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__TransDataFromClient_name);
            IceInternal.TwowayOutgoingAsync<IRPC.Callback_CSTransDataFromClient_TransDataFromClient> result__ =  getTwowayOutgoingAsync<IRPC.Callback_CSTransDataFromClient_TransDataFromClient>(__TransDataFromClient_name, TransDataFromClient_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__TransDataFromClient_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeString(strClientId);
                os__.writeString(strXml);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void TransDataFromClient_completed__(Ice.AsyncResult r__, IRPC.Callback_CSTransDataFromClient_TransDataFromClient cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_TransDataFromClient(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CSTransDataFromClientPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CSTransDataFromClientPrx r = b as CSTransDataFromClientPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CSTransDataFromClientPrxHelper h = new CSTransDataFromClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CSTransDataFromClientPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CSTransDataFromClientPrx r = b as CSTransDataFromClientPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CSTransDataFromClientPrxHelper h = new CSTransDataFromClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CSTransDataFromClientPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CSTransDataFromClientPrxHelper h = new CSTransDataFromClientPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CSTransDataFromClientPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CSTransDataFromClientPrxHelper h = new CSTransDataFromClientPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CSTransDataFromClientPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CSTransDataFromClientPrx r = b as CSTransDataFromClientPrx;
            if(r == null)
            {
                CSTransDataFromClientPrxHelper h = new CSTransDataFromClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CSTransDataFromClientPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CSTransDataFromClientPrxHelper h = new CSTransDataFromClientPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::IRPC::CSTransDataFromClient",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        public static void write__(IceInternal.BasicStream os__, CSTransDataFromClientPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static CSTransDataFromClientPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                CSTransDataFromClientPrxHelper result = new CSTransDataFromClientPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IRPC
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public abstract class CallbackClientDisp_ : Ice.ObjectImpl, CallbackClient
    {
        #region Slice operations

        public int TransDataToClient(string strXml)
        {
            return TransDataToClient(strXml, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int TransDataToClient(string strXml, Ice.Current current__);

        public void TransHeartbeat(long lTime)
        {
            TransHeartbeat(lTime, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void TransHeartbeat(long lTime, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::IRPC::CallbackClient",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus TransDataToClient___(CallbackClient obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string strXml;
            strXml = is__.readString();
            inS__.endReadParams();
            int ret__ = obj__.TransDataToClient(strXml, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus TransHeartbeat___(CallbackClient obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            long lTime;
            lTime = is__.readLong();
            inS__.endReadParams();
            obj__.TransHeartbeat(lTime, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "TransDataToClient",
            "TransHeartbeat",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return TransDataToClient___(this, inS__, current__);
                }
                case 1:
                {
                    return TransHeartbeat___(this, inS__, current__);
                }
                case 2:
                {
                    return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                }
                case 3:
                {
                    return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                }
                case 4:
                {
                    return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                }
                case 5:
                {
                    return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.1")]
    public abstract class CSTransDataFromClientDisp_ : Ice.ObjectImpl, CSTransDataFromClient
    {
        #region Slice operations

        public void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval)
        {
            RegistClient(strClientId, callbackClient, iHeartbeatInterval, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void RegistClient(string strClientId, IRPC.CallbackClientPrx callbackClient, int iHeartbeatInterval, Ice.Current current__);

        public int TransDataFromClient(string strClientId, string strXml)
        {
            return TransDataFromClient(strClientId, strXml, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int TransDataFromClient(string strClientId, string strXml, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::IRPC::CSTransDataFromClient",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus RegistClient___(CSTransDataFromClient obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string strClientId;
            IRPC.CallbackClientPrx callbackClient;
            int iHeartbeatInterval;
            strClientId = is__.readString();
            callbackClient = IRPC.CallbackClientPrxHelper.read__(is__);
            iHeartbeatInterval = is__.readInt();
            inS__.endReadParams();
            obj__.RegistClient(strClientId, callbackClient, iHeartbeatInterval, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus TransDataFromClient___(CSTransDataFromClient obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string strClientId;
            string strXml;
            strClientId = is__.readString();
            strXml = is__.readString();
            inS__.endReadParams();
            int ret__ = obj__.TransDataFromClient(strClientId, strXml, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "RegistClient",
            "TransDataFromClient",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return RegistClient___(this, inS__, current__);
                }
                case 1:
                {
                    return TransDataFromClient___(this, inS__, current__);
                }
                case 2:
                {
                    return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                }
                case 3:
                {
                    return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                }
                case 4:
                {
                    return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                }
                case 5:
                {
                    return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
